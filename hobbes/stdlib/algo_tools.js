exports.source = {};

exports.source['IO'] = 'package AlgoTools;\n\n\n/* Copyright 1997/98: Arbeitsgruppe Praktische Informatik, Universitaet Osnabrueck\n   Frank Lohmeyer, Frank M. Thiesing, Oliver Vornberger: oliver@informatik.uni-osnabrueck.de\n */\n\n\n/**\n  * Die Klasse <code>IO</code> beinhaltet Methoden zum Einlesen und Ausgeben von Daten. <br>\n  * Alle Methoden sind Klassenmethoden und m&uuml;ssen mit den Pr&auml;fix IO. aufgerufen werden.<br>\n  * Es gibt zwei Gruppen von Methoden:<br>\n  * <br>\n  *      1.) Eingabe-Methoden. <br>\n  *           Diese Methoden beginnen mit dem Prefix <code>read</code> und liefern immer einen g&uuml;ltigen Wert.<br>\n  *          Alle Eingabe-Methoden gibt es in zwei Varianten: \n  *               Die erste Variante hat als ersten Parameter einen String (prompt),\n  *               der zuerst ausgegeben wird. Danach wird dann die Eingabe gelesen.<br>\n  *               Bei der zweiten Variante entfaellt dieser String, d.h. es wird\n  *               sofort die Eingabe gelesen.<br>\n  *          Alle Eingabe-Methoden lesen eine Zeile ein und versuchen, diese in die\n  *          entsprechenden Datentypen umzuwandeln (dabei zaehlt das abschliessende\n  *          Newline nicht zur Eingabezeile). Falls dies moeglich ist, wird der\n  *          entsprechende Wert zurueckgeliefert. Entspricht die Eingabe nicht der\n  *          Vorgabe, so wird eine Fehlermeldung ausgegeben und eine neue Zeile\n  *          eingelesen, mit der der Vorgang wiederholt wird. Dies geschieht solange,\n  *          bis eine korrekte Eingabe gelesen werden konnte.<br>\n  *<br>\n  *      2.) Ausgabe-Methoden. <br>\n  *          Diese Methoden heissen (fast) alle <code>print</code> oder <code>println</code> und geben einen entsprechend\n  *          formatierten String aus.<br>\n  *          Alle Ausgabe-Methoden gibt es in zwei Varianten:<br>\n  *               Die erste Variante heisst print(...) und gibt abhaengig von\n  *               den Parametern einen passend formatierten String aus.<br>\n  *               Die zweite Variante heisst println(...) und gibt einen\n  *               analog formatierten String sowie ein Newline aus.<br>\n  *          Die Methoden unterscheiden sich im wesentlichen durch ihren ersten Parameter.\n  *          Dieser kann aus {String, long, double, boolean, char, char[], Object} sein.\n  *          Andere Typen sind wie folgt enthalten: byte, short, int -&gt; long; float -&gt; double.<br>\n  *          Die einfachsten Ausgabe-Methoden enthalten nur einen Parameter und\n  *          geben ihre Variable unformatiert aus.<br>\n  *          Die zweite Gruppe von Ausgabe-Methoden hat zusaetzlich einen Parameter len,\n  *          der die Breite des Ausgabe-Feldes angibt. Die Variable wird innerhalb dieser\n  *          Breite rechtsbuendig ausgegeben. Ist das Ergebnis laenger als die Vorgabe,\n  *          wird das Ausgabe-Feld passend verlaengert.<br>\n  * @author  Thomas Richter\n  * @version  %I%, %G%\n  */\npublic class IO {\n\n        public static String NL = "\\n";    \n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der zur&uuml;ckgegeben wird.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als String\n          */\n        public static String readLine(String prompt) {\n                System.out.print(prompt);\n                return System.in.readln();\n        }\n\n        /**\n          * Liest einen String ein, der zur&uuml;ckgegeben wird.\n          * @return der eingegebene Text als String\n          */\n        public static String readLine() { return readLine(""); }\n\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der zur&uuml;ckgegeben wird.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als String\n          */\n        public static String readString(String prompt) {\n\n                return(readLine(prompt));\n        }\n\n        /**\n          * Liest einen String ein, der zur&uuml;ckgegeben wird.\n          * @return der eingegebene Text als String\n          */\n        public static String readString() { return(readString("")); }\n\n        /**\n          * Gibt einen Text aus, liest dann einen String ein und gibt das erste Zeichen zur&uuml;ck.\n          * @param prompt Auszugebender Text\n          * @return  das erste Zeichen der Eingabe. Falls diese leer ist, ist der Character \'\\n\'.\n          */\n        public static char readChar(String prompt) {\n\n                String input = readLine(prompt);\n\n                if (input.length() > 0) {\n\n                        return(Character.parseChar(input));\n                }\n\n                return(\'\\n\');\n        }\n\n        /**\n          * Liest einen String ein und gibt das erste Zeichen zur&uuml;ck.\n          * @return  das erste Zeichen der Eingabe. Falls diese leer ist, ist der Character \'\\n\'.\n          */\n        public static char readChar() { return(readChar("")); }\n\n        /**\n          * Gibt einen Text aus, liest einen String ein und liefert einen Boolean zur&uuml;ck.\n          * <br>Die Eingabe mu&szlig; aus folgender Menge sein:<br>\n          *  &nbsp;&nbsp;&nbsp; true TRUE yes Yes YES ja Ja JA t T y Y j J 1  <br>     \n          *  &nbsp;&nbsp;&nbsp; false False FALSE no No NO nein Nein NEIN f F n N 0  <br>\n          * Ist die Eingabe nicht aus dieser Menge, wird erneut um Eingabe gebeten.\n          * @param prompt auszugebender Text\n          * @return\n          *     true:  Bei Eingabe aus : true True TRUE yes Yes YES ja Ja JA t T y Y j J 1 <br>\n          *     false: Bei Eingabe aus : false False FALSE no No NO nein Nein NEIN f F n N 0 \n          */\n        public static boolean readBoolean(String prompt) {\n\n                boolean result = false;\n\n                boolean noBoolean;\n                String input;\n\n                do {\n                        noBoolean = false;\n\n                        input = readLine(prompt);\n\n                        if (input == "true" || input == "True" || input == "TRUE" ||\n                            input == "yes"  || input == "Yes"  || input == "YES"  ||\n                            input == "ja"   || input == "Ja"   || input == "JA"   ||\n                            input == "t"    || input == "T"    ||\n                            input == "y"    || input == "Y"    ||\n                            input == "j"    || input == "J"    ||\n                            input == "1") {\n\n                                result = true;\n\n                        } else if (input == "false" || input == "False" || input == "FALSE" ||\n                                 input == "no"      || input == "No"    || input == "NO"    ||\n                                 input == "nein"    || input == "Nein"  || input == "NEIN"  ||\n                                 input == "f"       || input == "F"     ||\n                                 input == "n"       || input == "N"     ||\n                                 input == "0") {\n\n                                result = false;\n\n                        } else {\n\n                                noBoolean = true;\n                                prompt    = "Fehler! Bitte ein boolean: ";\n                        }\n\n                } while (noBoolean);\n\n                return(result);\n        }\n\n        /**\n          * Liest einen String ein und liefert einen Boolean zur&uuml;ck.\n          * <br>Die Eingabe mu&szlig; aus folgender Menge sein:<br>\n          *  &nbsp;&nbsp;&nbsp; true TRUE yes Yes YES ja Ja JA t T y Y j J 1  <br>     \n          *  &nbsp;&nbsp;&nbsp; false False FALSE no No NO nein Nein NEIN f F n N 0  <br>\n          * Ist die Eingabe nicht aus dieser Menge, wird erneut um Eingabe gebeten.\n          * @return\n          *     true:  Bei Eingabe aus : true True TRUE yes Yes YES ja Ja JA t T y Y j J 1 <br>\n          *     false: Bei Eingabe aus : false False FALSE no No NO nein Nein NEIN f F n N 0 \n          */\n        public static boolean readBoolean() { return(readBoolean("")); }\n\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der in einen Longwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als Long\n          */\n        public static long readLong(String prompt) {\n\n                long result = 0L;\n\n                boolean noLong;\n\n                do {\n                        noLong = false;\n\n                        result = (Long.parseLong(readLine(prompt)));\n\n                } while (noLong);\n\n                return(result);\n        }\n\n        /**\n          * Liest einen String ein, der in einen Longwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @return der eingegebene Text als Long\n          */\n        public static long readLong() { return(readLong("")); }\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der in einen Integerwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als Integer umgewandelt\n          */\n        public static int readInt(String prompt) {\n\n                int result = 0;\n\n                boolean noInt;\n\n                do {\n                        noInt = false;\n\n                        result = (Integer.parseInt(readLine(prompt)));\n\n                } while (noInt);\n\n                return(result);\n        }\n\n        /**\n          * Liest einen String ein, der in einen Integerwert umgewandelt und zur&uuml;ckgegeben wird.\n         * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @return der eingegebene Text als Integer umgewandelt\n          */\n        public static int readInt() { return(readInt("")); }\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der in einen Shortwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als Short umgewandelt\n          */\n        public static short readShort(String prompt) {\n\n                short result = 0;\n\n                boolean noShort;\n\n                do {\n                        noShort = false;\n\n                        result = (Short.parseShort(readLine(prompt)));\n\n                } while (noShort);\n\n                return(result);\n        }\n\n        /**\n          * Liest einen String ein, der in einen Shortwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @return der eingegebene Text als Short umgewandelt\n          */\n        public static short readShort() { return(readShort("")); }\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der in einen Bytewert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als Byte umgewandelt\n          */\n        public static byte readByte(String prompt) {\n\n                byte result = 0;\n\n                boolean noByte;\n\n                do {\n                        noByte = false;\n\n                        result = (Byte.parseByte(readLine(prompt)));\n\n                } while (noByte);\n\n                return(result);\n        }\n\n        /**\n          * Liest einen String ein, der in einen Bytewert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @return der eingegebene Text als Byte umgewandelt\n          */\n        public static byte readByte() { return(readByte("")); }\n\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der in einen Doublewert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als Double umgewandelt\n          */\n        public static double readDouble(String prompt) {\n\n                double result = 0.0;\n\n                boolean noDouble;\n\n                do {\n                        noDouble = false;\n\n                        result = (Double.parseDouble(readLine(prompt)));\n\n                } while (noDouble);\n\n                return(result);\n        }\n\n        /**\n          * Liest dann einen String ein, der in einen Doublewert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @return der eingegebene Text als Double umgewandelt\n          */\n        public static double readDouble() { return(readDouble("")); }\n\n        /**\n          * Gibt einen Text aus und liest dann einen String ein, der in einen Floatwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @param prompt Auszugebender Text\n          * @return der eingegebene Text als Float umgewandelt\n          */\n        public static float readFloat(String prompt) {\n\n                float result = 0.0F;\n\n                boolean noFloat;\n\n                do {\n                        noFloat = false;\n\n                        result = (Float.parseFloat(readLine(prompt)));\n\n                } while (noFloat);\n\n                return(result);\n        }\n\n        /**\n          * Liest einen String ein, der in einen Floatwert umgewandelt und zur&uuml;ckgegeben wird.\n          * <br>Bei fehlerhafter Eingabe wird eine erneute Eingabe angefordert.\n          * @return der eingegebene Text als Float umgewandelt\n          */\n        public static float readFloat() { return(readFloat("")); }\n\n\n        /**\n          * Gibt einen String auf dem Bildschirm aus.\n          * @param msg Der Text, der auf dem Bildschirm ausgegeben werden soll.\n          */\n        public static void print(String msg) {\n\n                System.out.print(msg);\n        }\n\n        /**\n          * Gibt einen String mit abschlie&szlig;endem Zeilenumbruch auf dem Bildschirm aus.\n          * @param msg Der Text, der auf dem Bildschirm ausgegeben werden soll.\n          */\n        public static void println(String msg) { print(msg + NL); }\n        /**\n          * Gibt einen Zeilenumbruch auf dem Bildschirm aus.\n          */\n        public static void println()           { print(""  + NL); }\n\n\n        /**\n          * Gibt einen Longwert auf dem Bildschirm aus.\n          * @param l Wert, der ausgegeben werden soll.\n          */\n        public static void print(long l)        { print(l + ""); }\n        /**\n          * Gibt einen Longwert und einen Zeilenumbruch auf dem Bildschirm aus.\n          * @param l Wert, der ausgegeben werden soll.\n          */\n        public static void println(long l)      { print(l + NL); }\n\n        /**\n          * Gibt einen Doublewert auf dem Bildschirm aus.\n          * @param d Wert, der ausgegeben werden soll.\n          */\n        public static void print(double d)      { print(d + ""); }\n        /**\n          * Gibt einen Doublewert und einen Zeilenumbruch auf dem Bildschirm aus.\n          * @param d Wert, der ausgegeben werden soll.\n          */\n        public static void println(double d)    { print(d + NL); }\n\n        /**\n          * Gibt einen Character auf dem Bildschirm aus.\n          * @param c Wert, der ausgegeben werden soll.\n          */\n        public static void print(char c)        { print(c + ""); }\n\n        /**\n          * Gibt einen Character und einen Zeilenumbruch auf dem Bildschirm aus.\n          * @param c Wert, der ausgegeben werden soll.\n          */\n        public static void println(char c)      { print(c + NL); }\n\n        /**\n          * Gibt einen Boolean auf dem Bildschirm aus.\n          * @param b Wert, der ausgegeben werden soll.\n          */\n        public static void print(boolean b)     { print(b + ""); }\n        /**\n          * Gibt einen Boolean und einen Zeilenumbruch auf dem Bildschirm aus.\n          * @param b Wert, der ausgegeben werden soll.\n          */\n        public static void println(boolean b)   { print(b + NL); }\n\n        /**\n          * Gibt einen String auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der String wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der String laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param s Der auszugebende Text\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void print(String s, int len)  {\n\n                int strlen = s.length();\n\n                for (int i=0; i < len-strlen; i++) {\n\n                        s = " " + s;\n                }\n\n                print(s);\n        }\n\n        /**\n          * Gibt einen Longwert auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Longwert wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Longwert laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param l Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void print(long l,      int len)  { print(l + "",             len); }\n        /**\n          * Gibt einen Doublewert auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Doublewert wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Doublewert laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param d Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void print(double d,    int len)  { print(d + "",             len); }\n        /**\n          * Gibt einen Character auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Character wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Character laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param d Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void print(char c,      int len)  { print(c + "",             len); }\n\n        /**\n          * Gibt einen Boolean auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Boolean wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Boolean laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param b Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void print(boolean b,   int len)  { print(b + "",             len); }\n\n        /**\n          * Gibt einen String und einen Zeilenumbruch auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der String wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der String laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param s Der auszugebende Text\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void println(String s,  int len)  { print(s,  len); print(NL); }\n\n        /**\n          * Gibt einen Longwert und einen Zeilenumbruch auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Longwert wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Longwert laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param l Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void println(long l,    int len)  { print(l,  len); print(NL); }\n\n        /**\n          * Gibt einen Doublewert und einen Zeilenumbruch auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Doublewert wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Doublewert laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param d Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void println(double d,  int len)  { print(d,  len); print(NL); }\n\n        /**\n          * Gibt einen Character und einen Zeilenumbruch auf dem Bildschirm in formatierter L&auml;nge aus.\n          * <br>Der Parameter len gibt die Breite des Ausgabe-Feldes an. Der Character wird innerhalb dieser\n          * Breite rechtsbuendig ausgegeben. \n          *<br>Ist der Character laenger als die Vorgabe, wird das Ausgabe-Feld passend verlaengert.\n          * @param d Der auszugebende Wert\n          * @param len Die L&auml;nge des Ausgabe-Feldes\n          */\n        public static void println(char c,    int len)  { print(c,  len); print(NL); }\n\n}\n';
